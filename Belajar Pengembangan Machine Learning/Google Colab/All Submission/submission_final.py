# -*- coding: utf-8 -*-
"""Submission_final_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cfGXHe650pIfSmQK1TeIVc8MH5G0ypLe
"""

import tensorflow as tf

!wget --no-check-certificate \
  ftp://cs.stanford.edu/cs/cvgl/Stanford_Online_Products.zip \
  -O /tmp/Stanford_Online_Products.zip

import zipfile, os

file_zip = '/tmp/Stanford_Online_Products.zip'
zip_ref = zipfile.ZipFile(file_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

base_dir = '/content/Stanford_Online_Products'

os.listdir(base_dir)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
                    rescale = 1./225,
                    rotation_range = 20,
                    horizontal_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest',
                    validation_split = 0.2
)

# deklarasi variabel global ukuran gambar
image_size = (224, 224)

train_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size = image_size,
        classes=['lamp_final', 'mug_final', 'sofa_final'],
        batch_size = 128,
        class_mode = 'categorical',
        subset='training'
)
 
val_generator = train_datagen.flow_from_directory(
        base_dir,
        target_size = image_size,
        classes=['lamp_final', 'mug_final', 'sofa_final'],
        batch_size = 64,
        class_mode = 'categorical',
        subset='validation'
)

# membuat class callback untuk stopping
class myCallback(tf.keras.callbacks.Callback):
   def on_epoch_end(self, epoch, logs={}):
      if(logs.get('accuracy') >= 0.85 and logs.get('val_accuracy') >= 0.85):
          print("\nAkurasi telah mencapai >=85%!")
          self.model.stop_training = True

callbacks = myCallback()

model = tf.keras.models.Sequential()


model.add(tf.keras.layers.Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (224,224,3)))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2))) 
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv2D(filters =96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Conv2D(filters = 96, kernel_size = (3,3),padding = 'Same',activation ='relu'))
model.add(tf.keras.layers.MaxPooling2D(pool_size=(2,2), strides=(2,2)))
model.add(tf.keras.layers.Dropout(0.2))

model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(512))
model.add(tf.keras.layers.Activation('relu'))
model.add(tf.keras.layers.Dropout(0.4))
model.add(tf.keras.layers.Dense(3, activation = "softmax"))

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.optimizers.Adam(),
    metrics = ['accuracy']
)

# deklarasi variabel global epoch
epochs = 200

# membuat objek callback untuk early stopping dan reduksi learning rate
reduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_accuracy', patience=15, verbose=2, min_lr=0.00001)

# latih model dengan model.fit
history = model.fit(train_generator,
                    epochs = epochs, 
                    validation_data = val_generator,
                    verbose = 2, 
                    steps_per_epoch = 25,
                    callbacks=[callbacks, reduce_lr],
                    validation_steps = 25)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)