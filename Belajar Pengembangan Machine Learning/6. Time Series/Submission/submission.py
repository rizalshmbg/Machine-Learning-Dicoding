# -*- coding: utf-8 -*-
"""Submission_ditolak2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gn4ikOu6ALxRzXY-Hok092UZu0UR_eEb
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/energydata_complete.csv')
df.head()

df.sort_values(by='date', ascending=True)
df.head

df.info()

df.isnull().sum()

dates = df["date"].values
temperature_office_room = df["T4"].values

plt.figure(figsize=(15, 15))
plt.plot(dates, temperature_office_room)
plt.title(
    'Temperature in office room (Celsius)',
    fontsize=20,
)

X = df["T4"]
date = df["date"]

X_train, X_val, date_train, date_val = train_test_split(X, date, test_size=0.2, shuffle=False)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis = -1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift = 1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train.values, window_size = 60, batch_size = 100, shuffle_buffer = 1000)
val_set = windowed_dataset(X_val.values, window_size = 60, batch_size = 100, shuffle_buffer = 1000)

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences = True),
    tf.keras.layers.LSTM(60),
    tf.keras.layers.Dense(30, activation = 'relu'),
    tf.keras.layers.Dense(10, activation = 'relu'),
    tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1.00000e-04, momentum=0.9)

num_of_epochs = 100

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=['mae'])
history = model.fit(train_set,
                    epochs=num_of_epochs,
                    validation_data=val_set,
                    verbose=2)

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.show()

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model mae')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='lower right')
plt.show()